'''
# 有几个内置函数和内置类，用到了匿名函数
    + sort 方法的使用
        - list 的 sort 方法，会直接对列表进行排序
        - 内置函数 sorted，不会改变原有的数据，而是生成一个新的结果,因此它可以对元组，字符串等不可变数据进行排序
        - 字典和字典之间不能使用比较运算，缺少比较规则，对于字典需要传递参数 key， 指定比较规则; key 参数类型是函数
    
    + filter 内置类的使用： 
        - 对可迭代对象进行过滤，得到的是一个filter对象
        - Python2的时候是内置函数，Python3修改成了一个内置类
        - filter 可以给定两个参数，第一个参数是函数，第二个参数是可迭代对象
        - filter结果是一个filter类型的对象,filter对象也是一个可迭代对象
        
    + map 的使用
        - map与filter的用法很相似，都需要两个参数，一个参数是函数，第二个参数是可迭代对象
        
    + reduce的使用
        - 以前是一个内置函数
        - 内置函数和内置类都在 builtins.py 文件里
        - 
        


'''
nums = [4, 8, 2, 1, 7, 6]
ints = (3, 6, 2, 9, 6, 4)
strs = '5241978'

x = sorted(nums)  # sorted内置函数，不会改变原有的数据，而是生成一个新的结果,因此它可以对元组，字符串进行排序
print(nums)
print(x)
y = sorted(strs)
print(strs)
print(y)
z = sorted(ints)
print(ints)
print(z)

nums.sort()  # list 的sort方法，会直接对列表进行排序
print(nums)

# ------------------------------------
students = [
    {'name': 'zhangsan', 'age': 18, 'score': 98, 'height': 180},
    {'name': 'lisi', 'age': 20, 'score': 88, 'height': 170},
    {'name': 'wangwu', 'age': 21, 'score': 75, 'height': 175},
    {'name': 'jack', 'age': 22, 'score': 100, 'height': 185},
    {'name': 'henry', 'age': 20, 'score': 95, 'height': 172}
]
# 字典和字典之间不能使用比较运算，缺少比较规则，对于字典需要传递参数 key， 指定比较规则
# key 参数类型是函数
students.sort(key=lambda x: x['score'])
print(students)

# ----------------------------------------------------------------------
# filter内置类的使用
ages = [12, 23, 30, 17, 16, 22, 19]
results1 = filter(lambda x: x > 18, ages)
print(results1)

results2 = filter(lambda x: x['age'] > 18, students)
print(list(results2))

# filter对象查看方法一 转为list
adults = list(results1)
print(adults)

# filter 对象查看方法二 遍历
for age in results1:
    print(age)

# -----------------------------------------------------------------
# map 的使用
ages = [13, 24, 53, 16, 22, 17, 18, 19]
x = map(lambda x: x + 2, ages)
print(list(x))

y = map(lambda x: x['age'] + 2, students)
print(list(y))

# --------------------------------------------------------------
# reduce 的使用
from functools import reduce

score = [100, 89, 76, 87]
x = reduce(lambda x, y: x + y, score)  # 其计算过程为：第一次为前两个数据的和，然后将和复制给x，y取下一个数据与x再求和；最终结果为所有元素的和
print(x)

print(sum(score))  # 该效果与reduce的结果一样

y = reduce(lambda x, y: x + y['age'], students, 0)  # 此处 0 为赋值给 x 的初始值
print(y)
