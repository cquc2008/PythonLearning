# 高阶函数
'''
    + 一个函数作为另一个函数的返回值
    + 一个函数作为另一个函数的参数
    + 函数内部再定义一个函数
'''


# 一个函数作为另一个函数的返回值
def test():
    print('我是test函数')
    return 'hello'


def demo():
    print('我是demo函数')
    return test


def bar():
    print('我是bar函数')
    return test()


x = test()
print(x)
y = demo()
print(y)
z = bar()
print(z)
t = demo()()
print(t)

'''
注意：
    a = bar()    # 加括号表示执行函数bar，并把bar的结果赋值给a
    a = bar      # 不加括号，表示给bar函数起别名 a
'''


# 把一个函数当过另一个函数的参数，主要是lambda函数的使用（sort，filter，reduce，map）


# 在函数内部再定义一个函数： 函数的嵌套
def outer(x):
    print('我是outer函数')

    def inner():  # inner函数是定义在outer函数内部的一个函数，在外部无法调用
        print('我是inner函数')

    if x > 18:
        inner()

    return 'hello'


outer(12)
outer(20)


# 闭包（closure）的概念：闭包是由函数及其相关的引用环境组合而成的实体。如果在一个内部函数里，对在外部作用域的变量进行引用，那么内部函数就被认为是闭包
def outer():
    x = 10  # 在外部函数里定义了一个变量x，是一个局部变量

    def inner():
        y = x + 1

    return inner


# 在内部函数如何修改外部函数的局部变量
def outer():
    x = 10  # 在外部函数里定义了一个变量x，是一个局部变量

    def inner():
        nonlocal x # 此时，这里的x不再是新增的变量，而是外部的局部变量x
        y = x + 1
        x= 20 # 如果不用前面的nonlocal声明，此处不是修改外部的x变量，而是在inner函数内部又创建了一个新的变量x

    return inner
