# String

a = 'hello'
b = "hello"
c = ''' hello'''
d = """hello"""

m = "I'm Xiaoming"
n = 'Xiaoming said:"I am Xiaoming"'
x = '''Xiaoming said:"I'm Xiaoming"'''
y ="""Xiaoming said:"I'm Xiaoming" """



#------------------------------------------
# 字符串中的转义字符 “\”（ escape character ）
'''
\' ==>显示一个普通的单引号
\" ==>显示一个普通额双引号
\n ==> 表示换行
\t ==> 表示显示一个制表符（相当于tab键，生成4个空格）
\\ ==> 表示一个普通的反斜杠
r'字符串' ==> 原生显示单引号''内的内容
'''
m = 'I\'m Xiaoming'
n = "Xiaoming said:\"I am Xiaoming\""



#---------------------------------------------------
# Subscript and Slice (下表和切片)
'''
+ 计算机中，下标都是从0开始的
+ 字符串是不可变的数据类型，可以通过下标进行查询，但不能进行修改替换
+ 切片是从字符串里复制一段指定的内容，生成一个新的字符串

'''
word = 'zhangsan'
print('word[4]')

m = 'abcdefghijklmnopqrstuvwxyz'
print(m[5])     # m[index] ==> 获取指定下标上的数据

# 切片语法 m[start:end:step],需注意包含start数据，不包含end数据
m[2:9:1]
print(m[2:9]) 
print(m[2:])  #如果只设置了start，会截取到最后
print(m[:9])  #如果只设置了end，会从头开始截取

# step指的是步长，理解为间隔，步长默认为1，不能为0，可以为负数，当为负数时表示从右往左
print(m[::])    # 从头到尾打印
print(m[::-1])  # 从尾到头逆向打印

print(m[-9:-5]) # start 和 end为负数时，表示从右边开始数，最右边为-1，而不是0



# --------------------------------------------
# 字符串常见的操作

# 获取字符串长度
x ='abcdefghijklmn'
print(len(x))        # get the length of string


# 查找内容相关的方法， find/index/rfind/rindex 可以获取指定字符的下标
print(x.find('l'))   # 从左开始查询，如果字符在字符串里不存在，该方法会返回 -1。注意，如果字符窜中存在两个及以上查找字符时，该方法给出的是最小的索引值
print(x.index('l'))  # 从左侧开始查询，如果查找的字符不在字符串内，会报错。注意，如果字符窜中存在两个及以上查找字符时，该方法给出的是最小的索引值

print(x.rfind('l'))  # 从右侧开始查询，如果字符在字符串里不存在，该方法会返回 -1。注意，如果字符窜中存在两个及以上查找的字符时，该方法给出的是最大的索引值
print(x.rindex('l'))  # 从右侧开始查询，如果查找的字符不在字符串内，会报错。注意，如果字符窜中存在两个及以上查找的字符时，该方法给出的是最大的索引值


# 判断相关 startswith，endswith,isalpha,isdigit,isalnum,isspace

x = 'Hello'
print(x.startswith('h'))    # 注意字母区分大小写
print(x.endswith('o'))
print(x.isalpha())
print(x.isdigit())          # 含有小数点的数字字符串判断结果为False，只有当是纯数字字符串时才是True
print(x.isalnum())          # 只要只有字母或数字，都返回True
print(x.isspace())



# 统计次数  count

x = 'Long long ago, there a hero named Anna lived in Kitchener'
print(x.count('e'))



# 替换 replace

word = 'hello'
print(word.replace('l','x'))



# 内容分割 split,rsplit,splitlines, partition 和 rpartition

x = 'zhangsan,lisi,wangwu,jerry,henry,merry,jack,tony'
print(x.split(','))
print(x.split())                                           # split 可以将一个字符串切割成一个列表，默认分隔符为' '
y = 'zhangsan-lisi-wangwu-jerry-henry-merry-jack-tony'
print(y.split('-'))
print(y.split('-',3))                                      # 默认情况下时，满足情况的均进行分割，如指定分割数量，则从左侧开始按照设定数量进行分割，
print(y.split())
z = 'zhangsan lisi wangwu jerry henry merry jack tony'
print(z.split(' '))
print(z.split())

print(x.rsplit(','))                                      # 不指定分割数量时，其结果与split一致
print(x.rsplit(',',2))                                    # 指定分割数量时，从右侧开始进行分割

word = 'abcdefghixmpqrst'
print（word.partition('x')）                 # partition 指定一个字符或字符串作为分隔符，将字符串分为三部分：前面，分隔符，后面。当字符串中有多个分隔符时，以第一个出现为准
print(x.partition(','))


# 修改大小写 capitalize, upper, lower

print('hello world'.capitalize())  # 仅将字符串的第一个单词的首字母大写

print('hello world'.upper())  # 将所有字母大写

print('Hello World'.lower())  # 将所有字母小写

print('hello world'.title())  # 将各词的首字母大写

print('hELLO wORLD'.title())  # 将各词的首字母大写



# 空格处理 ljust, rjust，center

print('Monday'.ljust(10, '*'))  # ljust用于将字符串按指定长度显示，如果字符串长度不够，用指定符号从右侧占位，默认为空格

print('Monday'.rjust(10, '+'))  # rjust用于将字符串按指定长度显示，如果字符串长度不够，用指定符号从左侧占位，默认为空格

print('Monday'.center(10, '*'))  # center让字符串居中，两边用指定符号占位

print('    apple    '.lstrip())  # 去除字符串左边的空格

print('    apple    '.rstrip())  # 去除字符串右侧的空格

print('    banana    '.strip())  # 去除字符串两侧的所有空格



# 将列表转换为字符串

fruits = ['apple','pear','peach','banana','orange','grape']
print('-'.join(fruits))
print('*'.join('hello'))





# 字符集  字符 ==》 编码 ==》 转换为二进制进行保存
'''
+ ASCII --> Latin1 ---> Unicode 编码

+ 字符 --> 数字编码存在一个对应关系

ASCII 码表使用一个字节来表示一个字符。最多只能表示128个，不适用最高位

0000 0000 最小 为 0
0111 1111 最大 为 127

+ GBK(国标扩，简体中文，汉字占两个字节), UTF-8（统一编码，汉字占3个字节）, BIG5（繁体中文）

'''
print(bin(97))  # 将十进制转化为二进制

print(ord('a'))  # ord() 用于查询字符对应的编码
print(ord('爱'))
print(chr(65))  # chr()根据编码获取对应的字符
print(chr(29233))

print('你'.encode('gbk'))  # 使用字符串的encode方法，将字符串转化为指定编码集结果
print('你'.encode('utf-8'))
print('你'.encode('big5'))

x = b'\xe4\xbd\xa0'
print(x.decode('utf8'))  # 使用decode将一个编码集的结果，转化成为对应的字符

