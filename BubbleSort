'''
冒泡排序思想：
    让一个数字和他相邻的下一个数字进行比较运算，如果前一个数字大于后一个数字，交换两个数据的位置    
'''

# METHOD 1 MYSELF

numbers = [6, 5, 3, 1, 8, 7, 2, 4]
print(numbers)

count = 0
i = 0
while i < len(numbers) - 1:
    count += 1
    if numbers[i] > numbers[i + 1]:
        numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]
        j = i
        while j > 0:
            count += 1
            if numbers[j - 1] > numbers[j]:
                numbers[j - 1], numbers[j] = numbers[j], numbers[j - 1]
            j -= 1
    i += 1
print(numbers)
print('Total number of comparison is:', count)




# METHOD 2
'''
可优化内容：
  + 每一趟比较次数的优化
  + 总比较趟数的优化: 在每一趟里都定义一个flag=True，假设每一趟都没有变换，则flag不变，终止循环
'''

numbers = [6, 5, 3, 1, 8, 7, 2, 4]
print(numbers)

count = 0
j=0
while j < len(numbers):

    flag = True
    i = 0
    
    while i <len(numbers)-1-j:
        count += 1
        if numbers[i]>numbers[i+1]:
            flag = False
            numbers[i],numbers[i+1]=numbers[i+1],numbers[i]
        i+=1
    if flag:
        break
    j+=1
    
print(numbers)
print('Total number of comparison is:', count)


# 调用list的sort方法可以直接对列表进行排序。sort方法时直接对原有list进行排序

numbers = [6, 5, 3, 1, 8, 7, 2, 4]
print(numbers)

numbers.sort() # 默认递增排序，递减排序时 numbers.sort(reverse = True)
print(numbers)



# 使用内置函数sorted（） 排序。sorted函数区别于list的类函数sort，其不对list本身产生更改，而是生成副本

numbers = [6, 5, 3, 1, 8, 7, 2, 4]
print(numbers)

x = sorted(numbers)
print(numbers)
print(x)



