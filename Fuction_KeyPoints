'''
# 函数就是一堆准备好的代码，在需要的时候调用这一堆代码；把多行代码封装成一个整体（函数），在python中，使用关键字 def 来声明一个函数
    + 格式为：
     def 函数名(参数):
        函数要执行的操作
        
    + 函数定义好了以后并不会自动执行，在需要的地方通过函数名对函数进行调用
    
    + 函数的参数
        - 函数声明时，括号里的参数称之为形式参数，简称 形参； 形参的值是不确定的，只是用来占位的
        - 调用函数时传递数据：函数调用时传入的参数，才是真正参与运算的数据，称之为实参；实参一一对应的传递，交给形参处理
        - 还可以通过定义变量名的形式给形参赋值，该情况下参数的顺序变换没有问题
        
        
    + 函数的返回值： 返回值就是函数执行的结果，但并不是所有的函数都必须要有返回值
        - 变量在外部时不可见的，只能在函数内部使用
        - return 表示一个函数的执行结果
        - 如果一个函数没有return的返回值，他的返回值就是None
        - 根据编程的需求，确定函数需不需要设置返回值
        
    + 函数的文档说明
        - help（函数名）可以查看函数的说明文档
        - Python开发中，函数参数类型是无法进行规定的；可以通过在函数中增加判断语句进行控制
        
    + 函数调用函数（函数的嵌套） 
        - 可看下面的实例
        
    + 函数的全局变量和局部变量
        - 全局变量， 在整个py文件里都可以访问，函数内部也可以调用
        - 局部变量，是在函数内部定义的变量，只能在函数内部使用
        - 如果局部变量和全局变量同名，会在函数内部重新定义一个新的局部变量，而不是修改全局变量
        - 函数内部如果想要修改全局变量，函数内需要用 global 对变量进行声明，表明是对全局变量进行修改
        — globals() 和 locals() 内置函数可以查看全局变量和局部变量
        - python里只有函数能够分割作用域
        
    + 函数的多个返回值
        - return语句表示一个函数的结束，只要看到return，则该函数终止
        - 一般情况下，一个函数最多只会执行一个return语句
        - 特殊情况下（finally语句），一个函数可能会执行多个return语句
        - 可以将多个数据打包（组成list，字典类型）进行返回
            。 def test(a,b):
                    x = a // b
                    y = a % b
                    return (x, y)
                    
               shang,yushu = test(13,5)   # 自动拆包
               print('商是{}，余数是{}'.format(shang,yushu))
    
    
    + 默认参数的使用
        - 缺省参数就是，如果你传递了参数，就是用传递参数，如果没有传递参数，就是用默认的值
        - 缺省参数要放置在后面
        - 如果有位置参数和关键字参数，关键字参数一定要放在位置参数的后面
    
    + 自定义可变参数
        - 可以通过列表，元组，集合等数据格式传递数据进行多个参数的处理
    
    + 可变参数
        - *args 表示可变位置参数
        - **kwargs 表示可变的关键字参数
        - 多出来的可变位置参数会以元组的形式保存到args里
        - 多出来的可变关键字参数会以字典的形式保存到kwargs里
    
    + 可变类型和不可变类型传参
        -     
        
    + 函数的注意事项
        - 函数的三要素：函数名，参数和返回值
        - 在一些编程语言里，允许函数重名，但在Python的语言里不允许函数重名
        - 如果函数重名，后一个函数会覆盖前一个函数
        - python中 函数名也可以理解为一个变量名
        
    + 递归函数的使用
        - 递归简单来说就是函数内部自己调用自己
        - 递归最重要的就是找到出口（停止的条件）
        
    + 匿名函数
        - 使用 lambda 关键词能创建小型匿名函数，这种函数得名于省略了用 def 声明函数的标准步骤
        - lambda 函数的语法只包含一个语句，如下：
            lambda 参数列表：运算表达式
        - 匿名函数多用来表达一个简单的函数，函数调用的次数很少，基本上就是调用一次
        - 调用匿名函数的方式：
            。 给他定义一个名字（很少使用）
            。 把这个函数当作参数传给另一个函数使用（使用场景比较多）
        
        
        
        
        
               
    
'''


# # 定义一个函数，求 n 到 m 之间所有整数之和
# def sum1(n, m):
#     '''
#     求两个数字之间整数的和
#     :param n: 起始值
#     :param m: 终止值
#     :return: 和
#     '''
#     sum = 0
#     for i in range(n, m):
#         sum += i
#     return sum


def factorial(n):
    '''
    求给定数n的阶乘
    :param n: 给定的数
    :return: 你的阶乘
    '''
    x = 1
    for i in range(1, n + 1):
        x *= i
    return x


print(factorial(5))


def fac_sum(n):
    '''
    求指定数n的阶乘的和  m=6  ==> 1!+2!+3!+4!+5!+6!
    :param n: 指定的数
    :return: 返回阶乘的和的结果
    '''
    x = 0
    for i in range(1, n + 1):
        x += factorial(i)
    return x


print(fac_sum(5))


# 可变参数的使用
def add_many(iterable):
    x = 0
    for n in iterable:
        x += n
    return x


print(add_many([1, 2, 3, 4, 5, 6]))
print(add_many({3, 4, 5, 6, 7, 8, 9}))
print(add_many((2, 4, 3, 12, 5, 7, 4)))


# 可变参数
def add(a, b, *args):  # *args 表示可变参数
    print('a = {}, b = {}'.format(a, b))
    print('args={}'.format(args))  # 多出来的可变参数会以元组的形式保存到args里


add(8, 5, 6, 7, 82, 3, 4)


# 求任意给定的数的乘积

def multiply_many(a, b, *args):
    c = a * b
    for arg in args:
        c *= arg
    return c


print(multiply_many(2, 4, 6, 8, 3, 6, 1, 9, 32))
print(multiply_many(2, 4, 12, 6))


def multiply_many2(*args):
    results = 1
    if len(args) == 0:
        return 0
    else:
        for arg in args:
            results *= arg
        return results


print(multiply_many2())
print(multiply_many2(2))

# 递归函数的使用
'''
定义递归函数，求1~n的和
'''


def get_sum(n):
    if n == 0:
        return 0
    return get_sum(n - 1) + n


print(get_sum(6))


# 使用递归求 n!
def factorial(n):
    if n == 1:
        return 1
    return factorial(n - 1) * n


print(factorial(5))


# 使用递归求 Fibonacci 数列的第 n 个数字
def fibonacci_recursion(n):
    if n == 2:
        return 1
    elif n == 1:
        return 1
    return fibonacci_recursion(n - 1) + fibonacci_recursion(n - 2)


print(fibonacci_recursion(10))


# 匿名函数
def calc(a, b, fn):  # fn 回调函数，此处fn相当与函数做另一个函数的参数；fn相当与add或minus的别名
    # 注意指定fn对应的函数是只写函数名即可，不需要加括号
    c = fn(a, b)
    return c


def add(x, y):
    return x + y


def minus(x, y):
    return x - y


x1 = calc(1, 2, add)
x2 = calc(10, 5, minus)

print(x1, x2)

x3 = calc(5, 7, lambda x, y: x + y)
x4 = calc(19, 3, lambda x, y: x - y)
x5 = calc(2, 7, lambda x, y: x * y)
x6 = calc(12, 3, lambda x, y: x / y)

print(x3, x4, x5, x6)
