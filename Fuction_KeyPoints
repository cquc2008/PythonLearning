'''
# 函数就是一堆准备好的代码，在需要的时候调用这一堆代码；把多行代码封装成一个整体（函数），在python中，使用关键字 def 来声明一个函数
    + 格式为：
     def 函数名(参数):
        函数要执行的操作
        
    + 函数定义好了以后并不会自动执行，在需要的地方通过函数名对函数进行调用
    
    + 函数的参数
        - 函数声明时，括号里的参数称之为形式参数，简称 形参； 形参的值是不确定的，只是用来占位的
        - 调用函数时传递数据：函数调用时传入的参数，才是真正参与运算的数据，称之为实参；实参一一对应的传递，交给形参处理
        - 还可以通过定义变量名的形式给形参赋值，该情况下参数的顺序变换没有问题
        
        
    + 函数的返回值： 返回值就是函数执行的结果，但并不是所有的函数都必须要有返回值
        - 变量在外部时不可见的，只能在函数内部使用
        - return 表示一个函数的执行结果
        - 如果一个函数没有return的返回值，他的返回值就是None
        - 根据编程的需求，确定函数需不需要设置返回值
        
    + 函数的文档说明
        - help（函数名）可以查看函数的说明文档
        - Python开发中，函数参数类型是无法进行规定的；可以通过在函数中增加判断语句进行控制
        
    + 函数调用函数（函数的嵌套） 
        - 可看下面的实例
        
    + 函数的全局变量和局部变量
        - 全局变量， 在整个py文件里都可以访问，函数内部也可以调用
        - 局部变量，是在函数内部定义的变量，只能在函数内部使用
        - 如果局部变量和全局变量同名，会在函数内部重新定义一个新的局部变量，而不是修改全局变量
        - 函数内部如果想要修改全局变量，函数内需要用 global 对变量进行声明，表明是对全局变量进行修改
        — globals() 和 locals() 内置函数可以查看全局变量和局部变量
        - python里只有函数能够分割作用域
        
    + 函数的多个返回值
        - return语句表示一个函数的结束，只要看到return，则该函数终止
        - 一般情况下，一个函数最多只会执行一个return语句
        - 特殊情况下（finally语句），一个函数可能会执行多个return语句
        - 可以将多个数据打包（组成list，字典类型）进行返回
            。 def test(a,b):
                    x = a // b
                    y = a % b
                    return (x, y)
                    
               shang,yushu = test(13,5)   # 自动拆包
               print('商是{}，余数是{}'.format(shang,yushu))

'''


def factorial(n):
    '''
    求给定数n的阶乘
    :param n: 给定的数
    :return: 你的阶乘
    '''
    x = 1
    for i in range(1, n + 1):
        x *= i
    return x


print(factorial(5))


def fac_sum(n):
    '''
    求指定数n的阶乘的和  m=6  ==> 1!+2!+3!+4!+5!+6!
    :param n: 指定的数
    :return: 返回阶乘的和的结果
    '''
    x = 0
    for i in range(1, n + 1):
        x += factorial(i)
    return x


print(fac_sum(5))
