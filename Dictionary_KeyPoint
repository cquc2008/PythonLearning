# dictionary
'''
    + 列表一般可以存储任意数据类型，但是一般情况下，我们都存单一数据类型
    + 列表只能存储值，但是无法对值进行描述
    
    + 字典不仅可以保存值，还能对值进行描述
    + 字典使用大括号 {} 表示，字典不仅有值 value， 还有值的描述 key
    + 字典里的数据都是以键-值对 key-value 的形式保留
    + key 和 value之间使用冒号':'连接
    + 多个键值对之间使用逗号 ',' 来分割
    
# 字典使用中的注意事项：
    + 字典里的 key 不允许重复，如果 key 重复了， 后一个 key对应的 value 值会覆盖前一个
    + 字典里的 value 值可以是任意数据类型，但是 key 只能使用不可变数据类型，一般使用字符串
    + 字典为可变数据类型，字典的数据在保存时是无序的
    
# 字典的更、删、改、查
    + 字典数据的查找（字典的数据是无序的，没有下标的概念）
        - 使用 key 获取对应的 value，注意 key 必须要加字符串符号
        - 如果要查找的 key 在字典中不存在，会直接报错
        - 使用 字典的 get 方法，在获取一个不存在的 key 时，不会报错，而是返回默认值 None； 如果存在则返回对应的value值
        - get 方法亦可以指定显示的默认值，不指定时，默认为'None'
        
    + 字典数据的添加和修改
        - 使用 key 可以修改对应的 value
        - 如果 key 存在，是修改 key 对应的 value 值
        - 如果 key 不存在，会往字典里添加一个新的 key-value对，即为添加数据
        
    + 字典数据的删除
        - pop() 方法 删除 key 对应的 key-value， 返回的是 key 对应的 value值
        - popitem() 方法 可以以 key-value 对的方式返回删除的键值对
        - clear() 方法可以清空一个字典
    
    + update 方法
        - list中使用 extend 方法将两个列表合并成为一个列表
            nums1 = [1,2,3,4,5]
            nums2 = [6,7,8,9]
            nums1.extend(nums2)
            print(nums1)
            
            # Method 2
            print(nums1 + nums2)
            
            
        - 字典中使用 update 方法将两个字典合并成为一个字典
            person1 = {'name':'zhangsan','age':18}
            person2 = {'addr':'中国','height':180}
            person1.update(person2)
            print(person1)
        
        - 对于不可变数据类型： 字符串和元组 可以使用 ’+‘ 实现两个数据的合并
            s1 = 'hello'
            s2 = 'world'
            print(s1 + s2) 
            
            words1 = ('hello','good')
            words2 = ('yes','okay')
            print(words1 + words2)
            
# 字典的遍历 （字典遍历的特殊性在于列表和元组是一个单一的数据，但是字典是键值对的形式）

    + 第一种遍历方式: for...in 循环， 获取到的仅为字典数据中的 key
        person = {'name':'zhangsan','age':18,'height':180}
        
        for x in person:
            print(x)
            
        for x in person:
            print(x,'=',person[x])  # 该改进可以打印出 key 及对应的 value
            
    + 方法二：首先获取到所有的 key， 然后在遍历 key， 根据 key 获取 value   
        person.keys() # 字典的 keys（）方法可以获得字典的 key
        
        for k in person.keys():
            print(k,'=',person[k])
            
    + 方法三：获取到所有的 value。 该方法只能获取到 value 值，不能得到 key   
        for v in person.values():
            print(v)
            
    + 方法四：以键值对进行遍历
        print(person.items())  
        
        for k , v in person.items():  # 拆包处理，得到 key 和 value
            print(k,'=',v)   
            
        for item in person.items():   # 列表里的元素是元组，把元组当作整体进行遍历
            print(item[0],'=',item[1])
    
    
'''

#----------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------

person = ['zhangsan', 18, 98, 97, 95, 93, 180, 150]  # 这个列表里的每一个元素代表的是什么？ 不知道

person2 = {'name': 'zhangsan',
           'age': 18,
           'math': 98,
           'Chinese': 97,
           'English': 95,
           'PE': 93,
           'height': 180,
           'weight': 150}

print(person2)

student = {
    'name': 'zhangsan',  # 值为字符串
    'age': 18,
    'height': 180,
    'age': 20,  # 值为整数，但 因为 key重复，对应的value值会替换前一个
    'isPass': True,  # 值为布尔值
    'hobbies': ['唱', '跳', '篮球', 'rap'],  # 值为列表
    'location': (5, 23),  # 值为元组
    4: 'good',  # key 为数字是可以的，因为数字是不可变数据类型
    ('yes', 'hello'): 100  # key可以是元组，因为元组是不可变数据类型
}
print(student)

print(student['name'])  # 使用 key 获取对应的 value 值

# print(student[name]) # 会报错
x = 'name'
print(student[x])

# print(student['gender'])# 当查找的 key 不存在时，会直接报错

print(student.get('gender'))  # get 方法可以在key不存在时返回默认值None，而非报错

print(student.get('name'))

print(student.get('gender', 'female'))  # 如果根据key获取不到value，使用给定的默认值显示，默认值为None，此处指定为'female'

print(student['name'])
student['name'] = 'lisi'
print(student['name'])

print(student)
student['parents'] = 2
print(student)

print(student)
print(student.pop('name'))
print(student)

print(student.popitem())

for x in student:
    print(x)

print(student.keys())
print(student.values())
print(student.items())
